export declare enum Options {
    /**
      Options to customize the screenshot behavior
      Attributes:
          LOAD_IMAGES: Enable image rendering with the request, add extra usage for the bandwidth consumed.
          DARK_MODE: Enable dark mode display.
          BLOCK_BANNERS: Block cookies banners and overlay that cover the screen.
          PRINT_MEDIA_FORMAT: Render the page in the print mode.
      */
    LOAD_IMAGES = "load_images",
    DARK_MODE = "dark_mode",
    BLOCK_BANNERS = "block_banners",
    PRINT_MEDIA_FORMAT = "print_media_format"
}
export declare enum Format {
    /**
      Format of the screenshot image.
      Attributes:
          JPG: JPG format.
          PNG: PNG format.
          WEBP: WEBP format.
          GIF: GIF format.
      */
    JPG = "jpg",
    PNG = "png",
    WEBP = "webp",
    GIF = "gif"
}
type ScreenshotConfigOptions = {
    url: string;
    format?: 'jpg' | 'png' | 'webp' | 'gif' | Format;
    capture?: string;
    resolution?: string;
    country?: string;
    timeout?: number;
    rendering_wait?: number;
    wait_for_selector?: string;
    options?: ('load_images' | 'dark_mode' | 'block_banners' | 'print_media_format' | Options)[];
    auto_scroll?: boolean;
    js?: string;
    cache?: boolean;
    cache_ttl?: number;
    cache_clear?: boolean;
    webhook?: string;
};
export declare class ScreenshotConfig {
    url: string;
    format?: 'jpg' | 'png' | 'webp' | 'gif' | Format;
    capture?: string;
    resolution?: string;
    country?: string;
    timeout?: number;
    rendering_wait?: number;
    wait_for_selector?: string;
    options?: ('load_images' | 'dark_mode' | 'block_banners' | 'print_media_format' | Options)[];
    auto_scroll?: boolean;
    js?: string;
    cache?: boolean;
    cache_ttl?: number;
    cache_clear?: boolean;
    webhook?: string;
    constructor(options: ScreenshotConfigOptions);
    private validateOptions;
    toApiParams(options: {
        key: string;
    }): Record<string, any>;
}
export {};
//# sourceMappingURL=screenshotconfig.d.ts.map