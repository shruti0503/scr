"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractionResult = exports.ScreenshotResult = exports.ScrapeResult = void 0;
const errors = __importStar(require("./errors.js"));
const deps_js_1 = require("./deps.js");
const utils_js_1 = require("./utils.js");
class ScrapeResult {
    constructor(data) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "uuid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_selector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.config = data.config;
        this.context = data.context;
        this.result = data.result;
        this.uuid = data.uuid;
        this._selector = undefined;
    }
    get selector() {
        if (!this._selector) {
            const headers = (0, utils_js_1.normalizeHeaders)(this.result.response_headers);
            if (!headers['content-type'].includes('text/html')) {
                throw new errors.ContentTypeError(`Cannot use selector on non-html content-type, received: ${this.result.response_headers['content-type']}`);
            }
            this._selector = deps_js_1.cheerio.load(this.result.content);
        }
        return this._selector;
    }
}
exports.ScrapeResult = ScrapeResult;
class ScreenshotResult {
    constructor(response, data) {
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "metadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.image = data;
        this.metadata = this.defineMetadata(response);
        this.result = this.decodeResponse(response, data); // raw result
    }
    defineMetadata(response) {
        const headers = (0, utils_js_1.normalizeHeaders)(response.headers);
        const contentType = headers['content-type'];
        let extension_name = '';
        if (contentType) {
            extension_name = contentType.split('/')[1].split(';')[0];
        }
        return {
            extension_name: extension_name,
            upstream_status_code: parseInt(headers['x-scrapfly-upstream-http-code'] || '200', 10),
            upstream_url: headers['x-scrapfly-upstream-url'] || '',
        };
    }
    decodeResponse(response, data) {
        const headers = (0, utils_js_1.normalizeHeaders)(response.headers);
        if (headers['content-type'] === 'json') {
            return JSON.parse(new TextDecoder().decode(data));
        }
        return null;
    }
}
exports.ScreenshotResult = ScreenshotResult;
class ExtractionResult {
    constructor(response) {
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "content_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "data_quality", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = response.data;
        this.content_type = response.content_type;
        this.data_quality = response.data_quality;
    }
}
exports.ExtractionResult = ExtractionResult;
