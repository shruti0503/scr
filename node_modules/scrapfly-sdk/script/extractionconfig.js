"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractionConfig = exports.CompressionFormat = void 0;
const errors = __importStar(require("./errors.js"));
const utils_js_1 = require("./utils.js");
const errors_js_1 = require("./errors.js");
var CompressionFormat;
(function (CompressionFormat) {
    /**
      Document compression format.
  
      Attributes:
          GZIP: gzip format.
          ZSTD: zstd format.
          DEFLATE: deflate.
      """
       */
    CompressionFormat["GZIP"] = "gzip";
    CompressionFormat["ZSTD"] = "zstd";
    CompressionFormat["DEFLATE"] = "deflate";
})(CompressionFormat || (exports.CompressionFormat = CompressionFormat = {}));
class ExtractionConfig {
    constructor(options) {
        Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "content_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "charset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "extraction_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        }); // saved template name
        Object.defineProperty(this, "extraction_ephemeral_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        }); // ephemeraly declared json template
        Object.defineProperty(this, "extraction_prompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "extraction_model", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "is_document_compressed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "document_compression_format", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "webhook", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // // deprecated options
        Object.defineProperty(this, "template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ephemeral_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.validateOptions(options);
        if (options.template) {
            console.warn(`Deprecation warning: 'template' is deprecated. Use 'extraction_template' instead.`);
            this.extraction_template = options.template;
        }
        else {
            this.extraction_template = options.extraction_template;
        }
        if (options.ephemeral_template) {
            console.warn(`Deprecation warning: 'ephemeral_template' is deprecated. Use 'extraction_ephemeral_template' instead.`);
            this.extraction_ephemeral_template = options.ephemeral_template;
        }
        else {
            this.extraction_ephemeral_template = options.extraction_ephemeral_template;
        }
        if (options.document_compression_format &&
            !Object.values(CompressionFormat).includes(options.document_compression_format)) {
            throw new errors.ExtractionConfigError(`Invalid CompressionFormat param value: ${options.document_compression_format}`);
        }
        this.body = options.body;
        this.content_type = options.content_type;
        this.url = options.url ?? this.url;
        this.charset = options.charset ?? this.charset;
        this.extraction_template = options.extraction_template ?? this.extraction_template;
        this.extraction_ephemeral_template = options.extraction_ephemeral_template ?? this.extraction_ephemeral_template;
        this.extraction_prompt = options.extraction_prompt ?? this.extraction_prompt;
        this.extraction_model = options.extraction_model ?? this.extraction_model;
        this.is_document_compressed = options.is_document_compressed ?? this.is_document_compressed;
        this.document_compression_format = options.document_compression_format ?? this.document_compression_format;
        this.webhook = options.webhook ?? this.webhook;
    }
    validateOptions(options) {
        const validKeys = new Set(Object.keys(this));
        for (const key in options) {
            if (!validKeys.has(key)) {
                throw new errors.ExtractionConfigError(`Invalid option provided: ${key}`);
            }
        }
    }
    toApiParams(options) {
        const params = {
            key: options.key,
        };
        // params.body = this.body;
        params.content_type = this.content_type;
        if (this.url) {
            params.url = encodeURI(this.url);
        }
        if (this.charset) {
            params.charset = this.charset;
        }
        if (this.extraction_template && this.extraction_ephemeral_template) {
            throw new errors_js_1.ExtractionConfigError('You cannot pass both parameters extraction_template and extraction_ephemeral_template. You must choose');
        }
        if (this.extraction_template) {
            params.extraction_template = this.extraction_template;
        }
        if (this.extraction_ephemeral_template) {
            params.extraction_template = 'ephemeral:' + (0, utils_js_1.urlsafe_b64encode)(JSON.stringify(this.extraction_ephemeral_template));
        }
        if (this.extraction_prompt) {
            params.extraction_prompt = this.extraction_prompt;
        }
        if (this.extraction_model) {
            params.extraction_model = this.extraction_model;
        }
        if (this.document_compression_format) {
            if (this.is_document_compressed === undefined) {
                throw new errors.ExtractionConfigError(`When declaring compression format, your must declare the ` +
                    `is_document_compressed parameter to compress the document or skip it.`);
            }
            if (this.is_document_compressed === false) {
                // if (this.document_compression_format === CompressionFormat.GZIP) {
                // XXX: This breaks cloudflare workers for some reason
                // const compressed = gzip(new TextEncoder().encode(this.body as string));
                // this.body = new Uint8Array(compressed);
                // throw new Error("automatic gzip is not supported yet, pass gzipped ");
                // } else {
                throw new errors.ExtractionConfigError(`Auto compression for ${this.document_compression_format} format isn't available. ` +
                    `You can manually compress to ${this.document_compression_format}.`);
                // }
            }
        }
        if (this.webhook) {
            params.webhook_name = this.webhook;
        }
        return params;
    }
}
exports.ExtractionConfig = ExtractionConfig;
