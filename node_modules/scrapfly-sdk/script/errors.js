"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractionApiError = exports.ScreenshotApiError = exports.QuotaLimitReached = exports.TooManyConcurrentRequests = exports.ScrapflySessionError = exports.ScrapflyWebhookError = exports.ScrapflyScheduleError = exports.ScrapflyAspError = exports.ScrapflyThrottleError = exports.ScrapflyProxyError = exports.ScrapflyScrapeError = exports.ApiHttpServerError = exports.TooManyRequests = exports.BadApiKeyError = exports.ApiHttpClientError = exports.UpstreamHttpServerError = exports.UpstreamHttpClientError = exports.UpstreamHttpError = exports.HttpError = exports.ContentTypeError = exports.EncodeError = exports.ExtractionConfigError = exports.ScreenshotConfigError = exports.ScrapeConfigError = exports.ScrapflyError = void 0;
class ScrapflyError extends Error {
    constructor(message, args = {}) {
        super(message);
        Object.defineProperty(this, "args", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.args = args;
    }
}
exports.ScrapflyError = ScrapflyError;
// raised when scrape config is invalid
class ScrapeConfigError extends ScrapflyError {
}
exports.ScrapeConfigError = ScrapeConfigError;
// raised when screenshot config is invalid
class ScreenshotConfigError extends ScrapflyError {
}
exports.ScreenshotConfigError = ScreenshotConfigError;
// raised when extraction config is invalid
class ExtractionConfigError extends ScrapflyError {
}
exports.ExtractionConfigError = ExtractionConfigError;
// raised when scrape parameters cannot be encoded
class EncodeError extends ScrapflyError {
}
exports.EncodeError = EncodeError;
class ContentTypeError extends ScrapflyError {
}
exports.ContentTypeError = ContentTypeError;
// Base error for all http related operations
class HttpError extends ScrapflyError {
}
exports.HttpError = HttpError;
class UpstreamHttpError extends HttpError {
}
exports.UpstreamHttpError = UpstreamHttpError;
class UpstreamHttpClientError extends UpstreamHttpError {
}
exports.UpstreamHttpClientError = UpstreamHttpClientError;
class UpstreamHttpServerError extends UpstreamHttpClientError {
}
exports.UpstreamHttpServerError = UpstreamHttpServerError;
class ApiHttpClientError extends HttpError {
}
exports.ApiHttpClientError = ApiHttpClientError;
// raised when API key provided to client is not valid or not existant
class BadApiKeyError extends ApiHttpClientError {
}
exports.BadApiKeyError = BadApiKeyError;
class TooManyRequests extends HttpError {
}
exports.TooManyRequests = TooManyRequests;
class ApiHttpServerError extends HttpError {
}
exports.ApiHttpServerError = ApiHttpServerError;
class ScrapflyScrapeError extends HttpError {
}
exports.ScrapflyScrapeError = ScrapflyScrapeError;
// raised when proxy settings don't match available proxies (e.g. invalid proxy pool, country setting)
class ScrapflyProxyError extends HttpError {
}
exports.ScrapflyProxyError = ScrapflyProxyError;
class ScrapflyThrottleError extends HttpError {
}
exports.ScrapflyThrottleError = ScrapflyThrottleError;
// raised when ScrapFly fails to bypass anti-scraping protection
class ScrapflyAspError extends HttpError {
}
exports.ScrapflyAspError = ScrapflyAspError;
class ScrapflyScheduleError extends HttpError {
}
exports.ScrapflyScheduleError = ScrapflyScheduleError;
// raised when Webhook is invalid or cannot be fulfilled (i.e. full queue)
class ScrapflyWebhookError extends HttpError {
}
exports.ScrapflyWebhookError = ScrapflyWebhookError;
// raised when session is access concurrently
class ScrapflySessionError extends HttpError {
}
exports.ScrapflySessionError = ScrapflySessionError;
// raised when concurrent requests exceed account limits
class TooManyConcurrentRequests extends HttpError {
}
exports.TooManyConcurrentRequests = TooManyConcurrentRequests;
// raised when account is out of scrape credits
class QuotaLimitReached extends HttpError {
}
exports.QuotaLimitReached = QuotaLimitReached;
// raised with Scrapfly screenshot API related errors
class ScreenshotApiError extends ApiHttpClientError {
}
exports.ScreenshotApiError = ScreenshotApiError;
// raised with Scrapfly extraction API related errors
class ExtractionApiError extends ApiHttpClientError {
}
exports.ExtractionApiError = ExtractionApiError;
