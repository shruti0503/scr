import { fetchRetry } from './utils.js';
import * as errors from './errors.js';
import type { ScrapeConfig } from './scrapeconfig.js';
import type { ScreenshotConfig } from './screenshotconfig.js';
import type { ExtractionConfig } from './extractionconfig.js';
import { type AccountData, ExtractionResult, ScrapeResult, ScreenshotResult } from './result.js';
export declare class ScrapflyClient {
    HOST: string;
    private key;
    private ua;
    fetch: typeof fetchRetry;
    constructor(options: {
        key: string;
    });
    /**
     * Raise appropriate error for given response and scrape result
     */
    errResult(response: Response, result: ScrapeResult): errors.ScrapflyError;
    /**
     * Handle clob and blob large objects
     */
    handleLargeObjects(result: any, format: 'clob' | 'blob'): Promise<ScrapeResult>;
    /**
     * Turn scrapfly API response to ScrapeResult or raise one of ScrapflyError
     */
    handleResponse(response: Response, result: ScrapeResult): ScrapeResult;
    /**
     * Retrieve Scrapfly account details
     */
    account(): Promise<AccountData>;
    /**
     * Issue a single scrape command from a given scrape configuration
     */
    scrape(config: ScrapeConfig): Promise<ScrapeResult>;
    /**
    Concurrently scrape multiple configs
    This is a async generator call it like this:
  
      const results = [];
      const errors = [];
      for await (const resultOrError of client.concurrentScrape(configs)) {
          if (resultOrError instanceof Error) {
              errors.push(resultOrError);
          } else {
              results.push(resultOrError);
          }
      }
  
    @param concurrencyLimit: if not set it will be taken from your account info
    */
    concurrentScrape(configs: ScrapeConfig[], concurrencyLimit?: number): AsyncGenerator<ScrapeResult | Error | undefined, void, undefined>;
    /**
     * Save screenshot response to a file
     */
    saveScreenshot(result: ScreenshotResult, name: string, savePath?: string): Promise<any>;
    /**
     * Turn scrapfly screenshot API response to ScreenshotResult or raise one of ScrapflyError
     */
    handleScreenshotResponse(response: Response): Promise<ScreenshotResult>;
    /**
     * Take a screenshot
     */
    screenshot(config: ScreenshotConfig): Promise<ScreenshotResult>;
    /**
     * Turn scrapfly Extraction API response to ExtractionResult or raise one of ScrapflyError
     */
    handleExtractionResponse(response: Response): Promise<ExtractionResult>;
    /**
     * Extract structured data from a web page
     */
    extract(config: ExtractionConfig): Promise<ExtractionResult>;
}
//# sourceMappingURL=client.d.ts.map