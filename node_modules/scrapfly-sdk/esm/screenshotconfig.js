import { ScreenshotConfigError } from './errors.js';
import { urlsafe_b64encode } from './utils.js';
import { log } from './logger.js';
export var Options;
(function (Options) {
    /**
      Options to customize the screenshot behavior
      Attributes:
          LOAD_IMAGES: Enable image rendering with the request, add extra usage for the bandwidth consumed.
          DARK_MODE: Enable dark mode display.
          BLOCK_BANNERS: Block cookies banners and overlay that cover the screen.
          PRINT_MEDIA_FORMAT: Render the page in the print mode.
      */
    Options["LOAD_IMAGES"] = "load_images";
    Options["DARK_MODE"] = "dark_mode";
    Options["BLOCK_BANNERS"] = "block_banners";
    Options["PRINT_MEDIA_FORMAT"] = "print_media_format";
})(Options || (Options = {}));
export var Format;
(function (Format) {
    /**
      Format of the screenshot image.
      Attributes:
          JPG: JPG format.
          PNG: PNG format.
          WEBP: WEBP format.
          GIF: GIF format.
      */
    Format["JPG"] = "jpg";
    Format["PNG"] = "png";
    Format["WEBP"] = "webp";
    Format["GIF"] = "gif";
})(Format || (Format = {}));
export class ScreenshotConfig {
    constructor(options) {
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "format", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "capture", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "resolution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "country", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rendering_wait", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "wait_for_selector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "auto_scroll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "js", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cache_ttl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cache_clear", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "webhook", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.validateOptions(options);
        if (options.format && !Object.values(Format).includes(options.format)) {
            throw new ScreenshotConfigError(`Invalid Format param value: ${options.format}`);
        }
        this.format = options.format ?? this.format;
        if (options.options) {
            options.options.forEach((opt) => {
                if (!Object.values(Options).includes(opt)) {
                    throw new ScreenshotConfigError(`Invalid Options param value: ${opt}`);
                }
            });
        }
        this.url = options.url;
        this.format = options.format ?? this.format;
        this.capture = options.capture ?? this.capture;
        this.resolution = options.resolution ?? this.resolution;
        this.country = options.country ?? this.country;
        this.timeout = options.timeout ?? this.timeout;
        this.rendering_wait = options.rendering_wait ?? this.rendering_wait;
        this.wait_for_selector = options.wait_for_selector ?? this.wait_for_selector;
        this.options = options.options ?? this.options;
        this.auto_scroll = options.auto_scroll ?? this.auto_scroll;
        this.js = options.js ?? this.js;
        this.cache = options.cache ?? this.cache;
        this.cache_ttl = options.cache_ttl ?? this.cache_ttl;
        this.cache_clear = options.cache_clear ?? this.cache_clear;
        this.webhook = options.webhook;
    }
    validateOptions(options) {
        const validKeys = new Set(Object.keys(this));
        for (const key in options) {
            if (!validKeys.has(key)) {
                throw new ScreenshotConfigError(`Invalid option provided: ${key}`);
            }
        }
    }
    toApiParams(options) {
        const params = {
            key: options.key,
        };
        params.url = this.url;
        if (this.format) {
            params.format = this.format.valueOf();
        }
        if (this.capture) {
            params.capture = this.capture;
        }
        if (this.resolution) {
            params.resolution = this.resolution;
        }
        if (this.country) {
            params.country = this.country;
        }
        if (this.timeout) {
            params.timeout = this.timeout;
        }
        if (this.rendering_wait) {
            params.rendering_wait = this.rendering_wait;
        }
        if (this.wait_for_selector) {
            params.wait_for_selector = this.wait_for_selector;
        }
        if (this.options) {
            params.options = this.options.join(',');
        }
        if (this.auto_scroll === true) {
            params.auto_scroll = this.auto_scroll;
        }
        if (this.js) {
            params.js = urlsafe_b64encode(this.js);
        }
        if (this.cache === true) {
            params.cache = this.cache;
            if (this.cache_ttl) {
                params.cache_ttl = this.cache_ttl;
            }
            if (this.cache_clear === true) {
                params.cache_clear = this.cache_clear;
            }
        }
        else {
            if (this.cache_ttl) {
                log.warn('Params "cache_ttl" is ignored. Works only if cache is enabled');
            }
            if (this.cache_clear) {
                log.warn('Params "cache_clear" is ignored. Works only if cache is enabled');
            }
        }
        if (this.webhook) {
            params.webhook_name = this.webhook;
        }
        return params;
    }
}
