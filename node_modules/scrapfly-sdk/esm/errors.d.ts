export declare class ScrapflyError extends Error {
    args: Record<string, any>;
    constructor(message: string, args?: Record<string, any>);
}
export declare class ScrapeConfigError extends ScrapflyError {
}
export declare class ScreenshotConfigError extends ScrapflyError {
}
export declare class ExtractionConfigError extends ScrapflyError {
}
export declare class EncodeError extends ScrapflyError {
}
export declare class ContentTypeError extends ScrapflyError {
}
export declare class HttpError extends ScrapflyError {
}
export declare class UpstreamHttpError extends HttpError {
}
export declare class UpstreamHttpClientError extends UpstreamHttpError {
}
export declare class UpstreamHttpServerError extends UpstreamHttpClientError {
}
export declare class ApiHttpClientError extends HttpError {
}
export declare class BadApiKeyError extends ApiHttpClientError {
}
export declare class TooManyRequests extends HttpError {
}
export declare class ApiHttpServerError extends HttpError {
}
export declare class ScrapflyScrapeError extends HttpError {
}
export declare class ScrapflyProxyError extends HttpError {
}
export declare class ScrapflyThrottleError extends HttpError {
}
export declare class ScrapflyAspError extends HttpError {
}
export declare class ScrapflyScheduleError extends HttpError {
}
export declare class ScrapflyWebhookError extends HttpError {
}
export declare class ScrapflySessionError extends HttpError {
}
export declare class TooManyConcurrentRequests extends HttpError {
}
export declare class QuotaLimitReached extends HttpError {
}
export declare class ScreenshotApiError extends ApiHttpClientError {
}
export declare class ExtractionApiError extends ApiHttpClientError {
}
//# sourceMappingURL=errors.d.ts.map