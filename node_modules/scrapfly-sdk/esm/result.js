import * as errors from './errors.js';
import { cheerio } from './deps.js';
import { normalizeHeaders } from './utils.js';
export class ScrapeResult {
    constructor(data) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "uuid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_selector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.config = data.config;
        this.context = data.context;
        this.result = data.result;
        this.uuid = data.uuid;
        this._selector = undefined;
    }
    get selector() {
        if (!this._selector) {
            const headers = normalizeHeaders(this.result.response_headers);
            if (!headers['content-type'].includes('text/html')) {
                throw new errors.ContentTypeError(`Cannot use selector on non-html content-type, received: ${this.result.response_headers['content-type']}`);
            }
            this._selector = cheerio.load(this.result.content);
        }
        return this._selector;
    }
}
export class ScreenshotResult {
    constructor(response, data) {
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "metadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.image = data;
        this.metadata = this.defineMetadata(response);
        this.result = this.decodeResponse(response, data); // raw result
    }
    defineMetadata(response) {
        const headers = normalizeHeaders(response.headers);
        const contentType = headers['content-type'];
        let extension_name = '';
        if (contentType) {
            extension_name = contentType.split('/')[1].split(';')[0];
        }
        return {
            extension_name: extension_name,
            upstream_status_code: parseInt(headers['x-scrapfly-upstream-http-code'] || '200', 10),
            upstream_url: headers['x-scrapfly-upstream-url'] || '',
        };
    }
    decodeResponse(response, data) {
        const headers = normalizeHeaders(response.headers);
        if (headers['content-type'] === 'json') {
            return JSON.parse(new TextDecoder().decode(data));
        }
        return null;
    }
}
export class ExtractionResult {
    constructor(response) {
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "content_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "data_quality", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = response.data;
        this.content_type = response.content_type;
        this.data_quality = response.data_quality;
    }
}
